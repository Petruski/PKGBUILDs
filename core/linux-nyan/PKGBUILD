# ChromiumOS kernel for TegraK1 Chromebooks (Nyan)
# Maintainer: Ronny Lorenz <raumzeit@gmx.net>

buildarch=4

pkgbase=linux-nyan
_kernelname=${pkgbase#linux}
_desc="TegraK1 Chromebooks (Nyan)"
pkgver=3.10.18
pkgrel=24
_commit=3a080eaf27b2094ae104f392b4cefbbe9382b8ee
_coreboot_commit=53a6a572138e42b81e33a87b59773e387f369766
arch=('armv7h')
url="https://chromium.googlesource.com/chromiumos/third_party/kernel/+/chromeos-3.10"
license=('GPL2')
makedepends=('xmlto' 'docbook-xsl' 'kmod' 'inetutils' 'bc' 'git' 'uboot-tools' 'vboot-utils' 'dtc')
options=('!strip')
source=(  "https://chromium.googlesource.com/chromiumos/third_party/kernel/+archive/${_commit}.tar.gz"
          "https://chromium.googlesource.com/chromiumos/third_party/coreboot/+archive/${_coreboot_commit}.tar.gz"
          http://archlinuxarm.org/builder/src/sd{8787,8797,8897}_uapsta_cros.bin
          'http://commondatastorage.googleapis.com/chromeos-localmirror/distfiles/xhci-firmware-2016.12.05.00.00.tbz2'
          'config'
          '0001-kernel-add-support-for-gcc-5.patch'
          '0002-Staging-wlan-ng-fix-sparse-warning-in-prism2fw.c.patch'
          '0003-netfilter-nfnetlink_cthelper-Remove-const-and-to-avo.patch'
          '0004-mwifiex-do-not-create-AP-and-P2P-interfaces-upon-dri.patch'
          '0005-use-chromiumos-mwifiex-drivers.patch'
          '0006-Fix-reversed-logic-in-drivers-md-md.c.patch'
          '0007-Fix-several-compilation-issues-with-GCC5.2.patch'
          '0008-zd1201-drop-the-node-parameter-from-the-hlist-iterat.patch'
          '0009-compiler-gcc.h-neatening.patch'
          '0010-compiler-gcc-integrate-the-various-compiler-gcc-345-.patch'
          '0011-include-linux-compiler-gcc.h-hide-assume_aligned-att.patch'
          '0012-include-linux-compiler-gcc.h-improve-__visible-docum.patch'
          '0013-compiler-gcc-disable-ftracer-for-__noclone-functions.patch'
          '0014-compiler-gcc-require-gcc-4.8-for-powerpc-__builtin_b.patch'
          '0015-BACKPORT-elevator-fix-truncation-of-icq_cache_name.patch'
          '0016-BACKPORT-V4L-DVB-ir-core-fix-gcc-7-warning-on-bool-a.patch'
          '0017-BACKPORT-nfs-Fix-showing-truncated-fsid-dev-in-proc-.patch'
          '0018-BACKPORT-video-fbdev-avoid-int-in-bool-context-warni.patch'
          '0019-isl29018-remove-duplicate-const.patch'
          '0020-tegra_soctherm-make-middle-operand-explicit.patch'
          '0021-BACKPORT-platform-chrome-cros_ec_dev-fix-Unknown-esc.patch'
          '0022-BACKPORT-platform-chrome-cros_ec_lightbar-fix-duplic.patch'
          '0023-BACKPORT-random32-fix-off-by-one-in-seeding-requirem.patch'
          '0024-BACKPORT-random32-add-periodic-reseeding.patch'
          '0025-BACKPORT-random32-add-prandom_reseed_late-and-call-w.patch'
          '0026-BACKPORT-random-introduce-getrandom-2-system-call.patch'
          '0027-BACKPORT-ARM-wire-up-getrandom-syscall.patch'
          '0028-BACKPORT-net-inet-API-fix-for-net-ipv4-ip_vti.c.patch'
	  '0029-BACKPORT-ip6_gre-Inlcude-missing-gre.h-header.patch'
	  'kernel-nyan.its'
          'kernel.keyblock'
          'kernel_data_key.vbprivk'
          'cmdline')

sha256sums=('4acb82805ed1f4769c4f02c7adeef1969e48453184eb4bd300e9b8951b5b119f'
            'f61654b69d395744460079403648269f30a3177f3d8e699da816e8465cbb5491'
            '72c9d88552505ee28dc9db342cd1ac1f4efee56f2884e710d66d3f60584c321d'
            '35f60f174da4bb367f37e355ca5f037a8528021d33d475cae91e968beb2f8325'
            'da63c1035c0d6c53a71901ff4ad4e7abca697b297b5446de4ed5bed0badd976b'
            'f25cd8269cc107108560b07a68d701870fb91e3ed195917113918d1cb1cbb74f'
            'f75ed13e9dd0e7f0d5a5fd1afe3574df8d4a34bae1d05268753e098402c56dd1'
            '37654581fe07d34934ee509f6fe032f7d09dd87aa33983887ae86cc0059ec4b1'
            '454882a06a6452a3a8e72b2c6516a85e87330343f5500cfffca44da1c07fe4f1'
            '6de4216e08521da41f7a22fe3ade8af8457a45ba89bfb596b25ee0845b38c904'
            'da01ca4cd0a0859cbd674beea5a878d85deebe61d4402a92d7d64abe71e441f0'
            '00112cf462760f9be2d721fd3dd486b5a37424c85a186c8fb12ebf1797d735af'
            '42a346e0e648812ab94ef0291e9293186d316d46de0c13cf06547dd17f2dd793'
            'e5853d7b628c98c65bf379d60888dece81a885cd89de1d761ca88ab35edadc2b'
            'faa5219bef649faba4d920e022109851a5f99af878157582aebcd683699677b6'
            'ba7b5d1c9d531fb9ac614bd008da29426ad5ae9082dcfb420a223997b39dd117'
            '55278e34a226aefa270d3045bc7ea93c9cc5aebc1b688c882074465e1fabd88b'
            '6fd7a14a5bbdf52154b6f6b492e29db3b33a151727ca2b5cd75353433d3589d5'
            'fc8ea4bc8228c96ebf87acae952c8b39dba341768d5715297824dc0dfea4c5de'
            'e7e0a984530711b4e7f97c2c9cc4dc2f26c6b495c42a6803686977db63b9c401'
            '5fa8e5331002e32f7551854af9dd2e15626a9dc1d488a06ea9a3d53fab04f03a'
            '5d8aca2e462d7dc63e319aececd47078185576560c5ff680149ee2fabeb6c999'
            '3b42b32a35bbf37e2149a0efd6a18215a486519a2d7f2016cd8b8bf1a2151b10'
            '2a7d2d461c8de644e1d84c51a0aaf011caa616bc598946d076936cd73b7bbdf2'
            '94ca4e15891c60e5f66d89022788a9e236209356eb410e78cc531bde0479d525'
            '1b85e206eb6ad60b7da466f32ce796c4598195c120739ed0c6de0d0d36045712'
            'cd8ac52499abd28c02de0baaa182f8f18debaec5427eadfa55b13aaf25860029'
            'b35c4260ec1686eea0421b3633e3ed708c064235c24d4d162067a1b5b6d9f485'
            '2d62b1731501b6a4c587c37726ccbefdba0b2fb0bc5da5ff89a42c80bcf33fad'
            '405c62a1198bc30c55661d2102f0e24577d3d8b92e326921c7832e588c25d424'
            '09613a24aa163a3ae64d0dbe6355d7d6a605c610de58801fd0b687c0b84e1550'
            'd169a5fc7640507a290612f030cd7a6874b46c7692d5b2ed284c40d081a6fb41'
            'd42c86073e8f33fa7a7cbc413aebd7827c2ba8aab594ee3b7bd04bf95411d755'
            'bbae39e68026c0597f10d445118b0dc198c96d5977243b3dbb26582855318012'
            '392a5357c1afe6ff2c2433dea734ef7b6483e19e5bee80270b272a3abafabb71'
            '4f29cba500d10cd797944d556bd1e68957844830859e5ae46b893806787d903e'
            '545446be6b8bdb6e46743f3ff3ba5a1a80f8f101649736939eb7e862061e4d61'
            '4e708c9ec43ac4a5d718474c9431ba6b6da3e64a9dda6afd2853a9e9e3079ffb'
            'bc9e707a86e55a93f423e7bcdae4a25fd470b868e53829b91bbe2ccfbc6da27b'
            'a6e15c62a4310627c50ce378bb1d614decd6bd6f24faa2167025382519e84584')

noextract=("${_coreboot_commit}.tar.gz")

prepare() {

  for p in \
    0001-kernel-add-support-for-gcc-5.patch \
    0002-Staging-wlan-ng-fix-sparse-warning-in-prism2fw.c.patch \
    0003-netfilter-nfnetlink_cthelper-Remove-const-and-to-avo.patch \
    0004-mwifiex-do-not-create-AP-and-P2P-interfaces-upon-dri.patch \
    0005-use-chromiumos-mwifiex-drivers.patch \
    0006-Fix-reversed-logic-in-drivers-md-md.c.patch \
    0007-Fix-several-compilation-issues-with-GCC5.2.patch \
    0008-zd1201-drop-the-node-parameter-from-the-hlist-iterat.patch \
    0009-compiler-gcc.h-neatening.patch \
    0010-compiler-gcc-integrate-the-various-compiler-gcc-345-.patch \
    0011-include-linux-compiler-gcc.h-hide-assume_aligned-att.patch \
    0012-include-linux-compiler-gcc.h-improve-__visible-docum.patch \
    0013-compiler-gcc-disable-ftracer-for-__noclone-functions.patch \
    0014-compiler-gcc-require-gcc-4.8-for-powerpc-__builtin_b.patch \
    0015-BACKPORT-elevator-fix-truncation-of-icq_cache_name.patch \
    0016-BACKPORT-V4L-DVB-ir-core-fix-gcc-7-warning-on-bool-a.patch \
    0017-BACKPORT-nfs-Fix-showing-truncated-fsid-dev-in-proc-.patch \
    0018-BACKPORT-video-fbdev-avoid-int-in-bool-context-warni.patch \
    0019-isl29018-remove-duplicate-const.patch \
    0020-tegra_soctherm-make-middle-operand-explicit.patch \
    0021-BACKPORT-platform-chrome-cros_ec_dev-fix-Unknown-esc.patch \
    0022-BACKPORT-platform-chrome-cros_ec_lightbar-fix-duplic.patch \
    0023-BACKPORT-random32-fix-off-by-one-in-seeding-requirem.patch \
    0024-BACKPORT-random32-add-periodic-reseeding.patch \
    0025-BACKPORT-random32-add-prandom_reseed_late-and-call-w.patch \
    0026-BACKPORT-random-introduce-getrandom-2-system-call.patch \
    0027-BACKPORT-ARM-wire-up-getrandom-syscall.patch \
    0028-BACKPORT-net-inet-API-fix-for-net-ipv4-ip_vti.c.patch \
    0029-BACKPORT-ip6_gre-Inlcude-missing-gre.h-header.patch
  do
    patch -p1 < ${p}
  done

  # copy kernel-nyan.its
  cp "${srcdir}/kernel-nyan.its" kernel.its

  # copy nvidia xhci firmware
  cp -r "${srcdir}/lib/firmware/nvidia" firmware/

  # extract coreboot sources into separate directory
  mkdir -p coreboot
  tar -C coreboot -xzf "${_coreboot_commit}.tar.gz"

  cp config .config

  # add pkgrel to extraversion
  sed -ri "s|^(EXTRAVERSION =)(.*)|\1 \2-${pkgrel}|" Makefile

  # don't run depmod on 'make install'. We'll do this ourselves in packaging
  sed -i '2iexit 0' scripts/depmod.sh
}

build() {
  # get kernel version
  WIFIVERSION=-3.8 make prepare

  # load configuration
  # Configure the kernel. Replace the line below with one of your choice.
  #make menuconfig # CLI menu for configuration
  #make nconfig # new CLI menu for configuration
  #make xconfig # X-based configuration
  #make oldconfig # using old config from previous kernel version
  # ... or manually edit .config

  # Copy back our configuration (use with new kernel version)
  #cp ./.config ../${pkgbase}.config

  ####################
  # stop here
  # this is useful to configure the kernel
  #msg "Stopping build"
  #return 1
  ####################

  #yes "" | make config

  # build!
  WIFIVERSION=-3.8 make ${MAKEFLAGS} \
  CFLAGS_MODULE=-fno-pic \
  KCFLAGS="${KCFLAGS} \
            -Wno-error=unused-const-variable \
            -Wno-error=misleading-indentation \
            -Wno-error=array-bounds \
            -Wformat-truncation=0 \
            -Wformat-overflow=0" \
  zImage modules dtbs

  # make tegra lp0_resume firmware
  make -C coreboot/src/soc/nvidia/tegra124/lp0

}

_package() {
  pkgdesc="The Linux Kernel and modules - ${_desc}"
  depends=('coreutils' 'linux-firmware' 'kmod')
  optdepends=('crda: to set the correct wireless channels of your country')
  provides=('kernel26' "linux=${pkgver}" "linux-tegra-k1=${pkgver}")
  conflicts=('linux')
  install=${pkgname}.install

  KARCH=arm

  # get kernel version
  _kernver="$(WIFIVERSION=-3.8 make kernelrelease)"
  _basekernel=${_kernver%%-*}
  _basekernel=${_basekernel%.*}

  mkdir -p "${pkgdir}"/{lib/modules,lib/firmware,boot/dtbs}
  WIFIVERSION=-3.8 make INSTALL_MOD_PATH="${pkgdir}" modules_install
  
  mkimage -D "-I dts -O dtb -p 2048" -f kernel.its vmlinux.uimg
  dd if=/dev/zero of=bootloader.bin bs=512 count=1
  vbutil_kernel \
    --pack vmlinux.kpart \
    --version 1 \
    --vmlinuz vmlinux.uimg \
    --arch arm \
    --keyblock kernel.keyblock \
    --signprivate kernel_data_key.vbprivk \
    --config cmdline \
    --bootloader bootloader.bin

  cp vmlinux.kpart "${pkgdir}/boot"

  # set correct depmod command for install
  sed \
    -e  "s/KERNEL_NAME=.*/KERNEL_NAME=${_kernelname}/g" \
    -e  "s/KERNEL_VERSION=.*/KERNEL_VERSION=${_kernver}/g" \
    -i "${startdir}/${pkgname}.install"

  # remove build and source links
  rm -f "${pkgdir}"/lib/modules/${_kernver}/{source,build}
  # remove the firmware
  rm -rf "${pkgdir}/lib/firmware"
  # gzip -9 all modules to save 100MB of space
  find "${pkgdir}" -name '*.ko' |xargs -P 2 -n 1 gzip -9
  # make room for external modules
  ln -s "../extramodules-${_basekernel}-${_kernelname:-ARCH}" "${pkgdir}/lib/modules/${_kernver}/extramodules"
  # add real version for building modules and running depmod from post_install/upgrade
  mkdir -p "${pkgdir}/lib/modules/extramodules-${_basekernel}-${_kernelname:-ARCH}"
  echo "${_kernver}" > "${pkgdir}/lib/modules/extramodules-${_basekernel}-${_kernelname:-ARCH}/version"

  # Now we call depmod...
  depmod -b "$pkgdir" -F System.map "$_kernver"

  # move module tree /lib -> /usr/lib
  mkdir -p "${pkgdir}/usr"
  mv "$pkgdir/lib" "$pkgdir/usr"

  # install ChromeOS mwifiex firmware
  mkdir -p "${pkgdir}"/usr/lib/firmware/mrvl
  cp sd{8787,8797,8897}_uapsta_cros.bin "${pkgdir}"/usr/lib/firmware/mrvl

  # install lp0_resume firmware
  install -D -m644 coreboot/src/soc/nvidia/tegra124/lp0/tegra_lp0_resume.fw "${pkgdir}/usr/lib/firmware/tegra12x/tegra_lp0_resume.fw"

}

_package-headers() {
  pkgdesc="Header files and scripts for building modules for linux kernel - ${_desc}"
  provides=("linux-headers=${pkgver}")
  conflicts=('linux-headers')

  install -dm755 "${pkgdir}/usr/lib/modules/${_kernver}"

  install -D -m644 Makefile \
    "${pkgdir}/usr/lib/modules/${_kernver}/build/Makefile"
  install -D -m644 kernel/Makefile \
    "${pkgdir}/usr/lib/modules/${_kernver}/build/kernel/Makefile"
  install -D -m644 .config \
    "${pkgdir}/usr/lib/modules/${_kernver}/build/.config"

  mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/include"

  for i in acpi asm-generic config crypto drm generated keys linux math-emu \
    media net pcmcia scsi sound trace uapi video xen; do
    cp -a include/${i} "${pkgdir}/usr/lib/modules/${_kernver}/build/include/"
  done

  # copy arch includes for external modules
  mkdir -p ${pkgdir}/usr/lib/modules/${_kernver}/build/arch/$KARCH
  cp -a arch/$KARCH/include ${pkgdir}/usr/lib/modules/${_kernver}/build/arch/$KARCH/

  # copy files necessary for later builds, like nvidia and vmware
  cp Module.symvers "${pkgdir}/usr/lib/modules/${_kernver}/build"
  cp -a scripts "${pkgdir}/usr/lib/modules/${_kernver}/build"

  # fix permissions on scripts dir
  chmod og-w -R "${pkgdir}/usr/lib/modules/${_kernver}/build/scripts"
  mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/.tmp_versions"

  mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/arch/${KARCH}/kernel"

  cp arch/${KARCH}/Makefile "${pkgdir}/usr/lib/modules/${_kernver}/build/arch/${KARCH}/"

  cp arch/${KARCH}/kernel/asm-offsets.s "${pkgdir}/usr/lib/modules/${_kernver}/build/arch/${KARCH}/kernel/"

  # add docbook makefile
  install -D -m644 Documentation/DocBook/Makefile \
    "${pkgdir}/usr/lib/modules/${_kernver}/build/Documentation/DocBook/Makefile"

  # add dm headers
  mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/md"
  cp drivers/md/*.h "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/md"

  # add inotify.h
  mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/include/linux"
  cp include/linux/inotify.h "${pkgdir}/usr/lib/modules/${_kernver}/build/include/linux/"

  # add wireless headers
  mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/net/mac80211/"
  cp net/mac80211/*.h "${pkgdir}/usr/lib/modules/${_kernver}/build/net/mac80211/"

  # add dvb headers for external modules
  # in reference to:
  # http://bugs.archlinux.org/task/9912
  mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/media/dvb-core"
  cp drivers/media/dvb-core/*.h "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/media/dvb-core/"
  # and...
  # http://bugs.archlinux.org/task/11194
  mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/include/config/dvb/"
  cp include/config/dvb/*.h "${pkgdir}/usr/lib/modules/${_kernver}/build/include/config/dvb/"

  # add dvb headers for http://mcentral.de/hg/~mrec/em28xx-new
  # in reference to:
  # http://bugs.archlinux.org/task/13146
  mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/media/dvb-frontends/"
  cp drivers/media/dvb-frontends/lgdt330x.h "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/media/dvb-frontends/"
  mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/media/i2c/"
  cp drivers/media/i2c/msp3400-driver.h "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/media/i2c/"

  # add dvb headers
  # in reference to:
  # http://bugs.archlinux.org/task/20402
  mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/media/usb/dvb-usb"
  cp drivers/media/usb/dvb-usb/*.h "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/media/usb/dvb-usb/"
  mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/media/dvb-frontends"
  cp drivers/media/dvb-frontends/*.h "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/media/dvb-frontends/"
  mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/media/tuners"
  cp drivers/media/tuners/*.h "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/media/tuners/"

  # add xfs and shmem for aufs building
  mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/fs/xfs"
  mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/mm"

  # copy in Kconfig files
  for i in $(find . -name "Kconfig*"); do
    mkdir -p "${pkgdir}"/usr/lib/modules/${_kernver}/build/`echo ${i} | sed 's|/Kconfig.*||'`
    cp ${i} "${pkgdir}/usr/lib/modules/${_kernver}/build/${i}"
  done

  chown -R root.root "${pkgdir}/usr/lib/modules/${_kernver}/build"
  find "${pkgdir}/usr/lib/modules/${_kernver}/build" -type d -exec chmod 755 {} \;

  # strip scripts directory
  find "${pkgdir}/usr/lib/modules/${_kernver}/build/scripts" -type f -perm -u+w 2>/dev/null | while read binary ; do
    case "$(file -bi "${binary}")" in
      *application/x-sharedlib*) # Libraries (.so)
        /usr/bin/strip ${STRIP_SHARED} "${binary}";;
      *application/x-archive*) # Libraries (.a)
        /usr/bin/strip ${STRIP_STATIC} "${binary}";;
      *application/x-executable*) # Binaries
        /usr/bin/strip ${STRIP_BINARIES} "${binary}";;
    esac
  done

  # remove unneeded architectures
  rm -rf "${pkgdir}"/usr/lib/modules/${_kernver}/build/arch/{alpha,arc,arm26,arm64,avr32,blackfin,c6x,cris,frv,h8300,hexagon,ia64,m32r,m68k,m68knommu,metag,mips,microblaze,mn10300,openrisc,parisc,powerpc,ppc,s390,score,sh,sh64,sparc,sparc64,tile,unicore32,um,v850,x86,xtensa}
}

pkgname=("${pkgbase}" "${pkgbase}-headers")
for _p in ${pkgname[@]}; do
  eval "package_${_p}() {
    _package${_p#${pkgbase}}
  }"
done
