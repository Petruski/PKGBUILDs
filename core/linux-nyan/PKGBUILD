# ChromiumOS kernel for TegraK1 Chromebooks (Nyan)
# Maintainer: Ronny Lorenz <raumzeit@gmx.net>

buildarch=4

pkgbase=linux-nyan
_kernelname=${pkgbase#linux}
_desc="TegraK1 Chromebooks (Nyan)"
pkgver=3.10.18
pkgrel=27
_commit=8d57cc314fb6199846e5b30637aa0ed355a44704
_coreboot_commit=24cf824297f8a4bf5faf6711fbe296d8384bddc3
arch=('armv7h')
url="https://chromium.googlesource.com/chromiumos/third_party/kernel/+/chromeos-3.10"
license=('GPL2')
makedepends=('xmlto' 'docbook-xsl' 'kmod' 'inetutils' 'bc' 'git' 'uboot-tools' 'vboot-utils' 'dtc')
options=('!strip')
source=(  "https://chromium.googlesource.com/chromiumos/third_party/kernel/+archive/${_commit}.tar.gz"
          "https://chromium.googlesource.com/chromiumos/third_party/coreboot/+archive/${_coreboot_commit}.tar.gz"
          http://archlinuxarm.org/builder/src/sd{8787,8797,8897}_uapsta_cros.bin
          'http://commondatastorage.googleapis.com/chromeos-localmirror/distfiles/xhci-firmware-2016.12.05.00.00.tbz2'
          'config'
          '0001-kernel-add-support-for-gcc-5.patch'
          '0002-Staging-wlan-ng-fix-sparse-warning-in-prism2fw.c.patch'
          '0003-netfilter-nfnetlink_cthelper-Remove-const-and-to-avo.patch'
          '0004-mwifiex-do-not-create-AP-and-P2P-interfaces-upon-dri.patch'
          '0005-use-chromiumos-mwifiex-drivers.patch'
          '0006-Fix-reversed-logic-in-drivers-md-md.c.patch'
          '0007-Fix-several-compilation-issues-with-GCC5.2.patch'
          '0008-zd1201-drop-the-node-parameter-from-the-hlist-iterat.patch'
          '0009-compiler-gcc.h-neatening.patch'
          '0010-compiler-gcc-integrate-the-various-compiler-gcc-345-.patch'
          '0011-include-linux-compiler-gcc.h-hide-assume_aligned-att.patch'
          '0012-include-linux-compiler-gcc.h-improve-__visible-docum.patch'
          '0013-compiler-gcc-disable-ftracer-for-__noclone-functions.patch'
          '0014-compiler-gcc-require-gcc-4.8-for-powerpc-__builtin_b.patch'
          '0015-BACKPORT-elevator-fix-truncation-of-icq_cache_name.patch'
          '0016-BACKPORT-V4L-DVB-ir-core-fix-gcc-7-warning-on-bool-a.patch'
          '0017-BACKPORT-nfs-Fix-showing-truncated-fsid-dev-in-proc-.patch'
          '0018-BACKPORT-video-fbdev-avoid-int-in-bool-context-warni.patch'
          '0019-isl29018-remove-duplicate-const.patch'
          '0020-tegra_soctherm-make-middle-operand-explicit.patch'
          '0021-BACKPORT-platform-chrome-cros_ec_dev-fix-Unknown-esc.patch'
          '0022-BACKPORT-platform-chrome-cros_ec_lightbar-fix-duplic.patch'
          '0023-BACKPORT-random32-fix-off-by-one-in-seeding-requirem.patch'
          '0024-BACKPORT-random32-add-periodic-reseeding.patch'
          '0025-BACKPORT-random32-add-prandom_reseed_late-and-call-w.patch'
          '0026-BACKPORT-random-introduce-getrandom-2-system-call.patch'
          '0027-BACKPORT-ARM-wire-up-getrandom-syscall.patch'
          '0028-BACKPORT-net-inet-API-fix-for-net-ipv4-ip_vti.c.patch'
          '0029-UPSTREAM-fs-configs-use-d_lockref.count-instead-inst.patch'
          '0030-BACKPORT-include-linux-log2.h-Fix-GCC-8.1-compile-er.patch'
          '0031-BACKPORT-regmap-rbtree-Improve-alignment.patch'
          '0032-fs-hfsplus-use-memcpy-instead-of-strncpy.patch'
          '0033-exec-avoid-gcc-8-warning-for-get_task_comm.patch'
          'kernel-nyan.its'
          'kernel.keyblock'
          'kernel_data_key.vbprivk'
          'cmdline')

sha256sums=('b32a477312ce3db1c289ad1e5c0456ef8553468be07854ef61a16870e502ca8e'
            '68f9050651c9714ce99c617a008e39266fb9887e6038dba8a7cfca223e01b989'
            '72c9d88552505ee28dc9db342cd1ac1f4efee56f2884e710d66d3f60584c321d'
            '35f60f174da4bb367f37e355ca5f037a8528021d33d475cae91e968beb2f8325'
            'da63c1035c0d6c53a71901ff4ad4e7abca697b297b5446de4ed5bed0badd976b'
            'f25cd8269cc107108560b07a68d701870fb91e3ed195917113918d1cb1cbb74f'
            'bd729586129f80e94eff07fb59df846f9b7e94d75ac4bc3d2b61d203ad133dd3'
            'a98caeee3c04add187a12ea933f25e922c01039f5f09773de0b4fe3336a3e73d'
            '65c8a40feab549f6146029a496acc91a46517fca6591f929add8397f92389152'
            '5d4503fdbdef2eb2be2471fd9fc72aad3ee7bb7862da7e78f520453497246a03'
            '5a799488b885d6c4ae2bd9c7e1aedbc9b538817064dfb96731f37c056de9ade5'
            'e24904ce2916a4e35ff015862d36469d68b560d8b7632d3e77630f19d7cee27e'
            '16f1e0ebe79ae6d87a1fd81ab16ddd1663f52f2a8b8a030e8294e62e2fee25d3'
            '27b2d7671a53a872ac38d73c24c13b26a2382d56fe033a6a9f3e4f821db1f4af'
            'be9892927242d7972657a59dae4cb516b09b2f788631d1affb4a401c38006308'
            'e1f7d224e8a927d66ce81187bf2a9d3fbe5efbbbae517d64ab6f389ab04e0287'
            'b4c8607bd1253ad1c930d6ab509109f63405b88dfbffc16123b9b562d5adf764'
            '7095a657d259bfffb44b7531a769481cda0cac78b327f15b6b5bcdfbc12d9a61'
            '72fb2ef5b689fcf8433b4a7bf19c828edc6af88f71ff610270137d10318b3a69'
            'e3aca8924b5bc079fabf5963fcf69e104fe0e9edb06c5720b45f87c384335aaa'
            'a74fff8e711c92b2ea4e88b2272ab568419b50b7903b08dce1928dd22151cf46'
            '17eb9f07860a4b10baa2799732bde5f0fdd126c99817a2b31f0ca49ae0b8640c'
            'd5d67074c4d449143e885baaf0739d2cedcc96f1e3a80391ae4c4335f1e51f01'
            '22aef53dbb540b80ec8ef38083cda25e7d9ff2a4ce8b5f704b4c5d79389932d7'
            'fedfe74d5a40b93ff451e92ee3e47288d53cb050f191800823d46d73f894b597'
            '95f4188a8a47d87da2130655924ef1b237f262d1929c2ec1b8f56a7aa5602797'
            '1815b584c1068279acb957908be42b1bcdae5ad9b26cf1e58688d847129e8680'
            'c5219c8b7f9e167fea900f8aa7d1adac51daa0e906c3f8da26fe2ae548c915f3'
            '0ed4661cd71ba8765b65779b4cbca8f4430b019c3d850329cf5091ba5915e044'
            '69bb1b544e650dbc3666a7c4c4cee968d079c307ff6d0adf0883dcbee7d306f8'
            'fb0a8a5dcd8c26d07a925281d31cfcf7ac7458a46551bda43ebcfc8b0b3ef4a8'
            '53761ced8062f777e57b8279b146b6f0ae437fea5b2fa694bb2cb5a656915688'
            '28fe3953b8167d61178a2c1b8cd4a3d431a9f2a31ab0cde2b0e657208d389841'
            '18b6a38a79e29ff3ae5284782e83e8f79af3a918b4cf200bdde9cc1c01762967'
            '72ea1632f465a420438acc48c166e11c7046dfa48991c04f5b03281bbdffe31d'
            '143d5b532061ba469095b82f5c8231b175c2cbf6545fec0aee880ceeff518694'
            '1614ba19ab51b20c118b0933be1a34a255b70456e7486035680d828eba43077d'
            '0ac0f2e960faad6875904bbc920420b6f8565341e482af1be0e16b81ecc08590'
            '6b77af904dd0697c0542e1291b1bbda736c629f739e4e03f1f5f587badd3199f'
            '338060370a4867feb7a41c16151f47f02e8c1c13dbd2021799a9fe0670cc80e9'
            '545446be6b8bdb6e46743f3ff3ba5a1a80f8f101649736939eb7e862061e4d61'
            '4e708c9ec43ac4a5d718474c9431ba6b6da3e64a9dda6afd2853a9e9e3079ffb'
            'bc9e707a86e55a93f423e7bcdae4a25fd470b868e53829b91bbe2ccfbc6da27b'
            'a6e15c62a4310627c50ce378bb1d614decd6bd6f24faa2167025382519e84584')

noextract=("${_coreboot_commit}.tar.gz")

prepare() {

  for p in \
    0001-kernel-add-support-for-gcc-5.patch \
    0002-Staging-wlan-ng-fix-sparse-warning-in-prism2fw.c.patch \
    0003-netfilter-nfnetlink_cthelper-Remove-const-and-to-avo.patch \
    0004-mwifiex-do-not-create-AP-and-P2P-interfaces-upon-dri.patch \
    0005-use-chromiumos-mwifiex-drivers.patch \
    0006-Fix-reversed-logic-in-drivers-md-md.c.patch \
    0007-Fix-several-compilation-issues-with-GCC5.2.patch \
    0008-zd1201-drop-the-node-parameter-from-the-hlist-iterat.patch \
    0009-compiler-gcc.h-neatening.patch \
    0010-compiler-gcc-integrate-the-various-compiler-gcc-345-.patch \
    0011-include-linux-compiler-gcc.h-hide-assume_aligned-att.patch \
    0012-include-linux-compiler-gcc.h-improve-__visible-docum.patch \
    0013-compiler-gcc-disable-ftracer-for-__noclone-functions.patch \
    0014-compiler-gcc-require-gcc-4.8-for-powerpc-__builtin_b.patch \
    0015-BACKPORT-elevator-fix-truncation-of-icq_cache_name.patch \
    0016-BACKPORT-V4L-DVB-ir-core-fix-gcc-7-warning-on-bool-a.patch \
    0017-BACKPORT-nfs-Fix-showing-truncated-fsid-dev-in-proc-.patch \
    0018-BACKPORT-video-fbdev-avoid-int-in-bool-context-warni.patch \
    0019-isl29018-remove-duplicate-const.patch \
    0020-tegra_soctherm-make-middle-operand-explicit.patch \
    0021-BACKPORT-platform-chrome-cros_ec_dev-fix-Unknown-esc.patch \
    0022-BACKPORT-platform-chrome-cros_ec_lightbar-fix-duplic.patch \
    0023-BACKPORT-random32-fix-off-by-one-in-seeding-requirem.patch \
    0024-BACKPORT-random32-add-periodic-reseeding.patch \
    0025-BACKPORT-random32-add-prandom_reseed_late-and-call-w.patch \
    0026-BACKPORT-random-introduce-getrandom-2-system-call.patch \
    0027-BACKPORT-ARM-wire-up-getrandom-syscall.patch \
    0028-BACKPORT-net-inet-API-fix-for-net-ipv4-ip_vti.c.patch \
    0029-UPSTREAM-fs-configs-use-d_lockref.count-instead-inst.patch \
    0030-BACKPORT-include-linux-log2.h-Fix-GCC-8.1-compile-er.patch \
    0031-BACKPORT-regmap-rbtree-Improve-alignment.patch \
    0032-fs-hfsplus-use-memcpy-instead-of-strncpy.patch \
    0033-exec-avoid-gcc-8-warning-for-get_task_comm.patch
  do
    patch -p1 < ${p}
  done

  # copy kernel-nyan.its
  cp "${srcdir}/kernel-nyan.its" kernel.its

  # copy nvidia xhci firmware
  cp -r "${srcdir}/lib/firmware/nvidia" firmware/

  # extract coreboot sources into separate directory
  mkdir -p coreboot
  tar -C coreboot -xzf "${_coreboot_commit}.tar.gz"

  cp config .config

  # add pkgrel to extraversion
  sed -ri "s|^(EXTRAVERSION =)(.*)|\1 \2-${pkgrel}|" Makefile

  # don't run depmod on 'make install'. We'll do this ourselves in packaging
  sed -i '2iexit 0' scripts/depmod.sh
}

build() {
  # get kernel version
  WIFIVERSION=-3.8 make prepare

  # load configuration
  # Configure the kernel. Replace the line below with one of your choice.
  #make menuconfig # CLI menu for configuration
  #make nconfig # new CLI menu for configuration
  #make xconfig # X-based configuration
  #make oldconfig # using old config from previous kernel version
  # ... or manually edit .config

  # Copy back our configuration (use with new kernel version)
  #cp ./.config ../${pkgbase}.config

  ####################
  # stop here
  # this is useful to configure the kernel
  #msg "Stopping build"
  #return 1
  ####################

  #yes "" | make config

  # build!
  WIFIVERSION=-3.8 make ${MAKEFLAGS} \
  CFLAGS_MODULE=-fno-pic \
  KCFLAGS="${KCFLAGS} \
            -Wno-error=unused-const-variable \
            -Wno-error=misleading-indentation \
            -Wno-error=array-bounds \
            -Wformat-truncation=0 \
            -Wformat-overflow=0" \
  zImage modules dtbs

  # make tegra lp0_resume firmware
  make -C coreboot/src/soc/nvidia/tegra124/lp0

}

_package() {
  pkgdesc="The Linux Kernel and modules - ${_desc}"
  depends=('coreutils' 'linux-firmware' 'kmod')
  optdepends=('crda: to set the correct wireless channels of your country')
  provides=('kernel26' "linux=${pkgver}" "linux-tegra-k1=${pkgver}")
  conflicts=('linux')
  install=${pkgname}.install

  KARCH=arm

  # get kernel version
  _kernver="$(WIFIVERSION=-3.8 make kernelrelease)"
  _basekernel=${_kernver%%-*}
  _basekernel=${_basekernel%.*}

  mkdir -p "${pkgdir}"/{lib/modules,lib/firmware,boot/dtbs}
  WIFIVERSION=-3.8 make INSTALL_MOD_PATH="${pkgdir}" modules_install
  
  mkimage -D "-I dts -O dtb -p 2048" -f kernel.its vmlinux.uimg
  dd if=/dev/zero of=bootloader.bin bs=512 count=1
  vbutil_kernel \
    --pack vmlinux.kpart \
    --version 1 \
    --vmlinuz vmlinux.uimg \
    --arch arm \
    --keyblock kernel.keyblock \
    --signprivate kernel_data_key.vbprivk \
    --config cmdline \
    --bootloader bootloader.bin

  cp vmlinux.kpart "${pkgdir}/boot"

  # set correct depmod command for install
  sed \
    -e  "s/KERNEL_NAME=.*/KERNEL_NAME=${_kernelname}/g" \
    -e  "s/KERNEL_VERSION=.*/KERNEL_VERSION=${_kernver}/g" \
    -i "${startdir}/${pkgname}.install"

  # remove build and source links
  rm -f "${pkgdir}"/lib/modules/${_kernver}/{source,build}
  # remove the firmware
  rm -rf "${pkgdir}/lib/firmware"
  # gzip -9 all modules to save 100MB of space
  find "${pkgdir}" -name '*.ko' |xargs -P 2 -n 1 gzip -9
  # make room for external modules
  ln -s "../extramodules-${_basekernel}-${_kernelname:-ARCH}" "${pkgdir}/lib/modules/${_kernver}/extramodules"
  # add real version for building modules and running depmod from post_install/upgrade
  mkdir -p "${pkgdir}/lib/modules/extramodules-${_basekernel}-${_kernelname:-ARCH}"
  echo "${_kernver}" > "${pkgdir}/lib/modules/extramodules-${_basekernel}-${_kernelname:-ARCH}/version"

  # Now we call depmod...
  depmod -b "$pkgdir" -F System.map "$_kernver"

  # move module tree /lib -> /usr/lib
  mkdir -p "${pkgdir}/usr"
  mv "$pkgdir/lib" "$pkgdir/usr"

  # install ChromeOS mwifiex firmware
  mkdir -p "${pkgdir}"/usr/lib/firmware/mrvl
  cp sd{8787,8797,8897}_uapsta_cros.bin "${pkgdir}"/usr/lib/firmware/mrvl

  # install lp0_resume firmware
  install -D -m644 coreboot/src/soc/nvidia/tegra124/lp0/tegra_lp0_resume.fw "${pkgdir}/usr/lib/firmware/tegra12x/tegra_lp0_resume.fw"

}

_package-headers() {
  pkgdesc="Header files and scripts for building modules for linux kernel - ${_desc}"
  provides=("linux-headers=${pkgver}")
  conflicts=('linux-headers')

  install -dm755 "${pkgdir}/usr/lib/modules/${_kernver}"

  install -D -m644 Makefile \
    "${pkgdir}/usr/lib/modules/${_kernver}/build/Makefile"
  install -D -m644 kernel/Makefile \
    "${pkgdir}/usr/lib/modules/${_kernver}/build/kernel/Makefile"
  install -D -m644 .config \
    "${pkgdir}/usr/lib/modules/${_kernver}/build/.config"

  mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/include"

  for i in acpi asm-generic config crypto drm generated keys linux math-emu \
    media net pcmcia scsi sound trace uapi video xen; do
    cp -a include/${i} "${pkgdir}/usr/lib/modules/${_kernver}/build/include/"
  done

  # copy arch includes for external modules
  mkdir -p ${pkgdir}/usr/lib/modules/${_kernver}/build/arch/$KARCH
  cp -a arch/$KARCH/include ${pkgdir}/usr/lib/modules/${_kernver}/build/arch/$KARCH/

  # copy files necessary for later builds, like nvidia and vmware
  cp Module.symvers "${pkgdir}/usr/lib/modules/${_kernver}/build"
  cp -a scripts "${pkgdir}/usr/lib/modules/${_kernver}/build"

  # fix permissions on scripts dir
  chmod og-w -R "${pkgdir}/usr/lib/modules/${_kernver}/build/scripts"
  mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/.tmp_versions"

  mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/arch/${KARCH}/kernel"

  cp arch/${KARCH}/Makefile "${pkgdir}/usr/lib/modules/${_kernver}/build/arch/${KARCH}/"

  cp arch/${KARCH}/kernel/asm-offsets.s "${pkgdir}/usr/lib/modules/${_kernver}/build/arch/${KARCH}/kernel/"

  # add docbook makefile
  install -D -m644 Documentation/DocBook/Makefile \
    "${pkgdir}/usr/lib/modules/${_kernver}/build/Documentation/DocBook/Makefile"

  # add dm headers
  mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/md"
  cp drivers/md/*.h "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/md"

  # add inotify.h
  mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/include/linux"
  cp include/linux/inotify.h "${pkgdir}/usr/lib/modules/${_kernver}/build/include/linux/"

  # add wireless headers
  mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/net/mac80211/"
  cp net/mac80211/*.h "${pkgdir}/usr/lib/modules/${_kernver}/build/net/mac80211/"

  # add dvb headers for external modules
  # in reference to:
  # http://bugs.archlinux.org/task/9912
  mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/media/dvb-core"
  cp drivers/media/dvb-core/*.h "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/media/dvb-core/"
  # and...
  # http://bugs.archlinux.org/task/11194
  mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/include/config/dvb/"
  cp include/config/dvb/*.h "${pkgdir}/usr/lib/modules/${_kernver}/build/include/config/dvb/"

  # add dvb headers for http://mcentral.de/hg/~mrec/em28xx-new
  # in reference to:
  # http://bugs.archlinux.org/task/13146
  mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/media/dvb-frontends/"
  cp drivers/media/dvb-frontends/lgdt330x.h "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/media/dvb-frontends/"
  mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/media/i2c/"
  cp drivers/media/i2c/msp3400-driver.h "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/media/i2c/"

  # add dvb headers
  # in reference to:
  # http://bugs.archlinux.org/task/20402
  mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/media/usb/dvb-usb"
  cp drivers/media/usb/dvb-usb/*.h "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/media/usb/dvb-usb/"
  mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/media/dvb-frontends"
  cp drivers/media/dvb-frontends/*.h "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/media/dvb-frontends/"
  mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/media/tuners"
  cp drivers/media/tuners/*.h "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/media/tuners/"

  # add xfs and shmem for aufs building
  mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/fs/xfs"
  mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/mm"

  # copy in Kconfig files
  for i in $(find . -name "Kconfig*"); do
    mkdir -p "${pkgdir}"/usr/lib/modules/${_kernver}/build/`echo ${i} | sed 's|/Kconfig.*||'`
    cp ${i} "${pkgdir}/usr/lib/modules/${_kernver}/build/${i}"
  done

  chown -R root.root "${pkgdir}/usr/lib/modules/${_kernver}/build"
  find "${pkgdir}/usr/lib/modules/${_kernver}/build" -type d -exec chmod 755 {} \;

  # strip scripts directory
  find "${pkgdir}/usr/lib/modules/${_kernver}/build/scripts" -type f -perm -u+w 2>/dev/null | while read binary ; do
    case "$(file -bi "${binary}")" in
      *application/x-sharedlib*) # Libraries (.so)
        /usr/bin/strip ${STRIP_SHARED} "${binary}";;
      *application/x-archive*) # Libraries (.a)
        /usr/bin/strip ${STRIP_STATIC} "${binary}";;
      *application/x-executable*) # Binaries
        /usr/bin/strip ${STRIP_BINARIES} "${binary}";;
    esac
  done

  # remove unneeded architectures
  rm -rf "${pkgdir}"/usr/lib/modules/${_kernver}/build/arch/{alpha,arc,arm26,arm64,avr32,blackfin,c6x,cris,frv,h8300,hexagon,ia64,m32r,m68k,m68knommu,metag,mips,microblaze,mn10300,openrisc,parisc,powerpc,ppc,s390,score,sh,sh64,sparc,sparc64,tile,unicore32,um,v850,x86,xtensa}
}

pkgname=("${pkgbase}" "${pkgbase}-headers")
for _p in ${pkgname[@]}; do
  eval "package_${_p}() {
    _package${_p#${pkgbase}}
  }"
done
